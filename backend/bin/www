#!/usr/bin/env node
const http = require('http');
const path = require('path');
const config = require('../config');
const logger = require('../lib/logger');
const app = require('../app');

const normalizePort = (val) => {
  const portNumber = parseInt(val, 10);
  if (isNaN(portNumber)) {
    return val;
  }
  if (portNumber >= 0) {
    return portNumber;
  }
  return false;
};

const port = normalizePort(config.server.port || '3000');
app.set('port', port);

const server = http.createServer(app);

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  logger.debug(`Listening on ${bind}`);
};

server.listen(port, () => {
  logger.debug(`Express server listening on port ${server.address().port}`);
});
server.on('error', onError);
server.on('listening', onListening);
